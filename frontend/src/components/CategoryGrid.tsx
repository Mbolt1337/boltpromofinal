'use client'

import { useMemo } from 'react'
import { Category } from '@/lib/api'
import Link from 'next/link'
import { ArrowRight, Tag } from 'lucide-react'
import { getCategoryIcon } from '@/lib/utils'
import SectionContainer from '@/components/ui/SectionContainer'
import SectionHeader from '@/components/ui/SectionHeader'

interface CategoryGridProps {
  categories: Category[]
  showHeader?: boolean
  limit?: number
}

// üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–æ–≤ –≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞—Ä—É–∂—É
const GRID_CLASSES = "category-grid"
const CARD_CLASSES = "category-card group focus-visible:ring-2 focus-visible:ring-white/20 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 focus-visible:outline-none"
const CONTENT_CLASSES = "category-card-content"
const ICON_WRAPPER_CLASSES = "category-icon-wrapper"
const ICON_CLASSES = "category-icon"
const INFO_CLASSES = "category-info"
const TITLE_CLASSES = "category-title"
const COUNT_CLASSES = "category-count"
const DESCRIPTION_CLASSES = "category-description"
const HOVER_EFFECT_CLASSES = "category-hover-effect"
const VIEW_ALL_CLASSES = "view-all-btn group"

// üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
interface ProcessedCategory extends Category {
  IconComponent: React.ComponentType<{ className?: string }>
  countText: string
}

// Skeleton –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function CategoryGridSkeleton({ count = 12 }: { count?: number }) {
  return (
    <div className={GRID_CLASSES}>
      {[...Array(count)].map((_, index) => (
        <div key={index} className="glass-card p-6 animate-shimmer">
          <div className="flex flex-col items-center text-center">
            <div className="w-16 h-16 bg-white/10 rounded-2xl mb-4"></div>
            <div className="h-6 bg-white/10 rounded w-24 mb-2"></div>
            <div className="h-4 bg-white/10 rounded w-16"></div>
          </div>
        </div>
      ))}
    </div>
  )
}

// üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function EmptyState({ showHeader }: { showHeader: boolean }) {
  const content = (
    <>
      {showHeader && (
        <SectionHeader
          title="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
          subtitle="–ò–∑—É—á–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"
          align="center"
        />
      )}

      <div className="glass-card p-12 text-center">
        <Tag className="w-16 h-16 text-gray-400 mx-auto mb-4" />
        <h3 className="text-2xl font-semibold text-white mb-4">
          –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
        </h3>
        <p className="text-gray-400">
          –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        </p>
      </div>
    </>
  )

  return showHeader ? <SectionContainer>{content}</SectionContainer> : content
}

// üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function CategoryCard({ category }: { category: ProcessedCategory }) {
  return (
    <Link
      href={`/categories/${category.slug}`}
      className={CARD_CLASSES}
    >
      <div className={CONTENT_CLASSES}>
        {/* –ò–∫–æ–Ω–∫–∞ */}
        <div className={ICON_WRAPPER_CLASSES}>
          <category.IconComponent className={ICON_CLASSES} />
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className={INFO_CLASSES}>
          <h3 className={TITLE_CLASSES}>
            {category.name}
          </h3>
          
          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ */}
          {category.promocodes_count !== undefined && (
            <p className={COUNT_CLASSES}>
              {category.countText}
            </p>
          )}
          
          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {category.description && (
            <p className={DESCRIPTION_CLASSES}>
              {category.description}
            </p>
          )}
        </div>
      </div>
      
      {/* Hover —ç—Ñ—Ñ–µ–∫—Ç */}
      <div className={HOVER_EFFECT_CLASSES}></div>
    </Link>
  )
}

export { CategoryGridSkeleton }

export default function CategoryGrid({ 
  categories, 
  showHeader = true,
  limit 
}: CategoryGridProps) {
  // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const processedCategories = useMemo(() => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç
    const limitedCategories = limit ? categories.slice(0, limit) : categories
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–∏–Ω —Ä–∞–∑
    return limitedCategories.map((category): ProcessedCategory => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const iconName = category.icon || category.slug
      const IconComponent = getCategoryIcon(iconName)
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑
      const count = category.promocodes_count || 0
      const countText = count === 1 ? '1 –ø—Ä–æ–º–æ–∫–æ–¥' : `${count} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`
      
      return {
        ...category,
        IconComponent,
        countText
      }
    })
  }, [categories, limit])

  // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (categories.length === 0) {
    return <EmptyState showHeader={showHeader} />
  }

  const content = (
    <>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      {showHeader && (
        <SectionHeader
          title="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
          subtitle="–ù–∞–π–¥–∏—Ç–µ —Å–∫–∏–¥–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
          align="center"
        />
      )}

      {/* üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–µ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ */}
      <div className={GRID_CLASSES}>
        {processedCategories.map((category) => (
          <CategoryCard
            key={category.id}
            category={category}
          />
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ" */}
      {limit && showHeader && categories.length > limit && (
        <div className="section-footer-gap flex justify-center">
          <Link href="/categories" className="inline-flex items-center gap-2 rounded-full border border-white/10 px-4 py-2 text-sm text-white/80 hover:bg-white/10">
            <span>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
            <ArrowRight className="w-4 h-4" />
          </Link>
        </div>
      )}
    </>
  )

  return showHeader ? <SectionContainer>{content}</SectionContainer> : content
}