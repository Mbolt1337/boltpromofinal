from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils import timezone
from django.db.models import Count, Q
from django.contrib.admin import SimpleListFilter
from import_export import resources, fields
from import_export.admin import ImportExportModelAdmin, ExportMixin
from import_export.widgets import ForeignKeyWidget, ManyToManyWidget

from .models import (
    Category, Store, PromoCode, Banner, Partner,
    StaticPage, ContactMessage, Showcase, ShowcaseItem,
    SiteSettings, AdminActionLog, Event, DailyAgg, SiteAssets
)
from .admin_mixins import AntiMojibakeModelForm


# =============================================================================
# RESOURCES –î–õ–Ø IMPORT-EXPORT
# =============================================================================

class CategoryResource(resources.ModelResource):
    """–†–µ—Å—É—Ä—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    
    class Meta:
        model = Category
        fields = ('id', 'name', 'slug', 'description', 'icon', 'is_active')
        export_order = ('id', 'name', 'slug', 'description', 'icon', 'is_active')


class StoreResource(resources.ModelResource):
    """–†–µ—Å—É—Ä—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    
    class Meta:
        model = Store
        fields = ('id', 'name', 'slug', 'rating', 'description', 'site_url', 'is_active')
        export_order = ('id', 'name', 'slug', 'rating', 'site_url', 'is_active')


class PromoCodeResource(resources.ModelResource):
    """–†–µ—Å—É—Ä—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    
    store = fields.Field(
        column_name='store',
        attribute='store',
        widget=ForeignKeyWidget(Store, 'name')
    )
    
    categories = fields.Field(
        column_name='categories',
        attribute='categories',
        widget=ManyToManyWidget(Category, field='name', separator='|')
    )
    
    class Meta:
        model = PromoCode
        fields = (
            'id', 'title', 'description', 'offer_type', 'code', 
            'discount_value', 'discount_label', 'is_hot', 'is_recommended',
            'expires_at', 'affiliate_url', 'store', 'categories', 'is_active'
        )
        export_order = (
            'id', 'title', 'store', 'offer_type', 'discount_value', 
            'code', 'expires_at', 'is_hot', 'is_recommended', 'is_active'
        )


# =============================================================================
# CUSTOM FILTERS
# =============================================================================

class ActivePromocodesFilter(SimpleListFilter):
    """–§–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏—Ö)"""
    title = '—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'
    parameter_name = 'promo_status'

    def lookups(self, request, model_admin):
        return (
            ('active', '–ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –∏—Å—Ç–µ–∫–ª–∏)'),
            ('expired', '–ò—Å—Ç–µ–∫—à–∏–µ'),
            ('hot', '–ì–æ—Ä—è—á–∏–µ'),
            ('recommended', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'active':
            return queryset.filter(
                is_active=True, 
                expires_at__gt=timezone.now()
            )
        elif self.value() == 'expired':
            return queryset.filter(expires_at__lte=timezone.now())
        elif self.value() == 'hot':
            return queryset.filter(is_hot=True)
        elif self.value() == 'recommended':
            return queryset.filter(is_recommended=True)
        return queryset


class OfferTypeFilter(SimpleListFilter):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    title = '—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    parameter_name = 'offer_type'

    def lookups(self, request, model_admin):
        return PromoCode.OFFER_TYPE_CHOICES

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(offer_type=self.value())
        return queryset


# =============================================================================
# CUSTOM ACTIONS
# =============================================================================

def make_active(modeladmin, request, queryset):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏"""
    updated = queryset.update(is_active=True)
    modeladmin.message_user(request, f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated} –∑–∞–ø–∏—Å–µ–π.')
make_active.short_description = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"


def make_inactive(modeladmin, request, queryset):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: —Å–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏"""
    updated = queryset.update(is_active=False)
    modeladmin.message_user(request, f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated} –∑–∞–ø–∏—Å–µ–π.')
make_inactive.short_description = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"


def make_hot(modeladmin, request, queryset):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: —Å–¥–µ–ª–∞—Ç—å –≥–æ—Ä—è—á–∏–º–∏"""
    updated = queryset.filter(offer_type='coupon').update(is_hot=True)
    modeladmin.message_user(request, f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≥–æ—Ä—è—á–∏–µ: {updated} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.')
make_hot.short_description = "üî• –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≥–æ—Ä—è—á–∏–µ"


def make_recommended(modeladmin, request, queryset):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏"""
    updated = queryset.update(is_recommended=True)
    modeladmin.message_user(request, f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ: {updated} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.')
make_recommended.short_description = "‚≠ê –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"


def mark_as_processed(modeladmin, request, queryset):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"""
    updated = queryset.update(is_processed=True, processed_at=timezone.now())
    modeladmin.message_user(request, f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {updated} —Å–æ–æ–±—â–µ–Ω–∏–π.')
mark_as_processed.short_description = "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"


# =============================================================================
# ADMIN CLASSES
# =============================================================================

@admin.register(Category)
class CategoryAdmin(ImportExportModelAdmin):
    resource_class = CategoryResource
    
    list_display = ['name', 'slug', 'icon_display', 'promocodes_count', 'is_active', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name', 'slug', 'description']
    list_editable = ['is_active']
    prepopulated_fields = {'slug': ('name',)}

    # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.GET.get('is_active__exact'):
            return qs.filter(is_active=True)
        return qs
    
    def icon_display(self, obj):
        if obj.icon:
            return format_html(
                '<i class="fas fa-{}"></i> {}',
                obj.icon, obj.icon
            )
        return '–≤–Ç‚Äù'
    icon_display.short_description = '–ò–∫–æ–Ω–∫–∞'
    
    def promocodes_count(self, obj):
        count = obj.promocodes_count
        if count > 0:
            url = reverse('admin:core_promocode_changelist')
            return format_html(
                '<a href="{}?categories__id__exact={}">{}</a>',
                url, obj.id, count
            )
        return count
    promocodes_count.short_description = '–ü—Ä–æ–º–æ–∫–æ–¥—ã'
    
    actions = [make_active, make_inactive]


@admin.register(Store)
class StoreAdmin(ImportExportModelAdmin):
    resource_class = StoreResource
    
    list_display = [
        'name', 'slug', 'logo_preview', 'rating', 'promocodes_count', 
        'site_link', 'is_active', 'created_at'
    ]
    list_filter = ['is_active', 'rating', 'created_at']
    search_fields = ['name', 'slug', 'description']
    list_editable = ['is_active', 'rating']
    prepopulated_fields = {'slug': ('name',)}
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', {
            'fields': ('logo', 'rating')
        }),
        ('–°—Å—ã–ª–∫–∏', {
            'fields': ('site_url',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_active',)
        }),
    )
    
    # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.GET.get('is_active__exact'):
            return qs.filter(is_active=True)
        return qs

    def logo_preview(self, obj):
        if obj.logo:
            return format_html(
                '<img src="{}" width="40" height="40" style="object-fit: cover; border-radius: 4px;" />',
                obj.logo.url
            )
        return '‚Äî'
    logo_preview.short_description = '–õ–æ–≥–æ'
    
    def site_link(self, obj):
        if obj.site_url:
            return format_html(
                '<a href="{}" target="_blank" rel="noopener">üîó –°–∞–π—Ç</a>',
                obj.site_url
            )
        return '‚Äî'
    site_link.short_description = '–°–∞–π—Ç'
    
    def promocodes_count(self, obj):
        count = obj.promocodes_count
        if count > 0:
            url = reverse('admin:core_promocode_changelist')
            return format_html(
                '<a href="{}?store__id__exact={}">{}</a>',
                url, obj.id, count
            )
        return count
    promocodes_count.short_description = '–ü—Ä–æ–º–æ–∫–æ–¥—ã'
    
    actions = [make_active, make_inactive]


class PromoCodeAdminForm(AntiMojibakeModelForm):
    """–§–æ—Ä–º–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä"""
    class Meta:
        model = PromoCode
        fields = '__all__'


@admin.register(PromoCode)
class PromoCodeAdmin(ImportExportModelAdmin):
    resource_class = PromoCodeResource
    form = PromoCodeAdminForm
    
    list_display = [
        'title_short', 'store', 'offer_type_badge', 'discount_display', 
        'code_display', 'status_badges', 'expires_at', 'views_count', 'is_active'
    ]
    
    list_filter = [
        ActivePromocodesFilter, OfferTypeFilter, 'is_active', 
        'is_hot', 'is_recommended', 'store', 'categories', 'created_at'
    ]
    
    search_fields = ['title', 'description', 'code', 'store__name']
    list_editable = ['is_active']
    filter_horizontal = ['categories']
    
    date_hierarchy = 'expires_at'
    
    fieldsets = (
        ('üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'description', 'store', 'categories')
        }),
        ('üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', {
            'fields': (
                'offer_type', 'code', 'discount_value', 'discount_label',
                'affiliate_url'
            )
        }),
        ('üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', {
            'fields': ('long_description', 'steps', 'fine_print', 'disclaimer'),
            'classes': ['collapse']
        }),
        ('‚ö° –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏', {
            'fields': ('is_hot', 'is_recommended'),
            'classes': ['wide']
        }),
        ('‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏', {
            'fields': ('expires_at',)
        }),
        ('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_active',),
            'classes': ['collapse']
        }),
    )
    
    # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.GET.get('is_active__exact'):
            return qs.filter(is_active=True)
        return qs

    def title_short(self, obj):
        title = obj.title
        if len(title) > 50:
            return f"{title[:47]}..."
        return title
    title_short.short_description = '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    
    def offer_type_badge(self, obj):
        colors = {
            'coupon': 'success',      # –∑–µ–ª–µ–Ω—ã–π
            'deal': 'primary',        # —Å–∏–Ω–∏–π
            'financial': 'warning',   # –∂–µ–ª—Ç—ã–π
            'cashback': 'info'        # –≥–æ–ª—É–±–æ–π
        }
        color = colors.get(obj.offer_type, 'secondary')
        return format_html(
            '<span class="badge badge-{}">{}</span>',
            color, obj.get_offer_type_display()
        )
    offer_type_badge.short_description = '–¢–∏–ø'
    
    def discount_display(self, obj):
        if obj.discount_value:
            return f"{obj.discount_value}%"
        return '‚Äî'
    discount_display.short_description = '–°–∫–∏–¥–∫–∞'

    def code_display(self, obj):
        if obj.code:
            return format_html(
                '<code style="background: #f1f1f1; padding: 2px 6px; border-radius: 3px;">{}</code>',
                obj.code
            )
        return '‚Äî'
    code_display.short_description = '–ö–æ–¥'
    
    def status_badges(self, obj):
        badges = []
        now = timezone.now()
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–∏—Å—Ç–µ—á–µ–Ω–∏—è
        if obj.expires_at <= now:
            badges.append('<span class="badge badge-danger">–ò—Å—Ç—ë–∫</span>')
        elif obj.is_active:
            badges.append('<span class="badge badge-success">–ê–∫—Ç–∏–≤–µ–Ω</span>')
        else:
            badges.append('<span class="badge badge-secondary">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>')

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏
        if obj.is_hot:
            badges.append('<span class="badge badge-warning">üî• –ì–æ—Ä—è—á–∏–π</span>')
        if obj.is_recommended:
            badges.append('<span class="badge badge-info">‚≠ê BoltPromo</span>')
            
        return format_html(' '.join(badges))
    status_badges.short_description = '–°—Ç–∞—Ç—É—Å'
    
    actions = [make_active, make_inactive, make_hot, make_recommended]


class BannerAdminForm(AntiMojibakeModelForm):
    """–§–æ—Ä–º–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä"""
    class Meta:
        model = Banner
        fields = '__all__'


@admin.register(Banner)
class BannerAdmin(ExportMixin, admin.ModelAdmin):
    form = BannerAdminForm
    list_display = ['title', 'subtitle_short', 'image_preview', 'cta_text', 'cta_link', 'is_active', 'sort_order']
    list_filter = ['is_active', 'created_at']
    search_fields = ['title', 'subtitle', 'cta_text']
    list_editable = ['is_active', 'sort_order']
    fields = ('image', 'cta_url', 'title', 'subtitle', 'cta_text', 'is_active', 'sort_order')
    
    def subtitle_short(self, obj):
        if obj.subtitle and len(obj.subtitle) > 40:
            return f"{obj.subtitle[:37]}..."
        return obj.subtitle or '‚Äî'
    subtitle_short.short_description = '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫'
    
    def image_preview(self, obj):
        if obj.image:
            return format_html(
                '<img src="{}" width="60" height="40" style="object-fit: cover; border-radius: 4px;" />',
                obj.image.url
            )
        return '‚Äî'
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'
    
    def cta_link(self, obj):
        if obj.cta_url:
            return format_html(
                '<a href="{}" target="_blank" rel="noopener">—Ä—ü‚Äù‚Äî {}</a>',
                obj.cta_url, obj.cta_text
            )
        return '–≤–Ç‚Äù'
    cta_link.short_description = '–°—Å—ã–ª–∫–∞'
    
    actions = [make_active, make_inactive]


@admin.register(Partner)
class PartnerAdmin(ExportMixin, admin.ModelAdmin):
    list_display = ['name', 'logo_preview', 'partner_link', 'order', 'is_active']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name']
    list_editable = ['is_active', 'order']
    
    def logo_preview(self, obj):
        if obj.logo:
            return format_html(
                '<img src="{}" width="40" height="40" style="object-fit: cover; border-radius: 4px;" />',
                obj.logo.url
            )
        return '‚Äî'
    logo_preview.short_description = '–õ–æ–≥–æ'

    def partner_link(self, obj):
        if obj.url:
            return format_html(
                '<a href="{}" target="_blank" rel="noopener">üîó –°–∞–π—Ç</a>',
                obj.url
            )
        return '‚Äî'
    partner_link.short_description = '–°–∞–π—Ç'
    
    actions = [make_active, make_inactive]


class StaticPageAdminForm(AntiMojibakeModelForm):
    """–§–æ—Ä–º–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä"""
    class Meta:
        model = StaticPage
        fields = '__all__'


@admin.register(StaticPage)
class StaticPageAdmin(ExportMixin, admin.ModelAdmin):
    form = StaticPageAdminForm
    list_display = ['get_slug_display', 'title', 'content_length', 'is_active', 'updated_at']
    list_filter = ['is_active', 'slug', 'updated_at']
    search_fields = ['title', 'content']
    list_editable = ['is_active']
    
    def content_length(self, obj):
        length = len(obj.content)
        if length > 1000:
            return f"{length:,} —Å–∏–º–≤–æ–ª–æ–≤"
        return f"{length} —Å–∏–º–≤–æ–ª–æ–≤"
    content_length.short_description = '–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
    
    actions = [make_active, make_inactive]


@admin.register(ContactMessage)
class ContactMessageAdmin(ExportMixin, admin.ModelAdmin):
    list_display = [
        'created_at', 'name', 'email', 'subject_short', 
        'message_short', 'page', 'status_display', 'is_processed'
    ]
    
    list_filter = [
        'is_processed', 'is_spam', 'created_at', 'page'
    ]
    
    search_fields = ['name', 'email', 'subject', 'message']
    list_editable = ['is_processed']
    date_hierarchy = 'created_at'
    readonly_fields = ['user_agent', 'ip_address', 'created_at', 'processed_at']
    
    fieldsets = (
        ('üìß –°–æ–æ–±—â–µ–Ω–∏–µ', {
            'fields': ('name', 'email', 'subject', 'message')
        }),
        ('üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('page', 'user_agent', 'ip_address', 'created_at'),
            'classes': ['collapse']
        }),
        ('‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞', {
            'fields': ('is_processed', 'processed_at', 'is_spam')
        }),
    )
    
    def subject_short(self, obj):
        if obj.subject and len(obj.subject) > 30:
            return f"{obj.subject[:27]}..."
        return obj.subject or '‚Äî'
    subject_short.short_description = '–¢–µ–º–∞'
    
    def message_short(self, obj):
        return obj.short_message
    message_short.short_description = '–°–æ–æ–±—â–µ–Ω–∏–µ'
    
    def status_display(self, obj):
        if obj.is_spam:
            return format_html('<span class="badge badge-danger">–°–ø–∞–º</span>')
        elif obj.is_processed:
            return format_html('<span class="badge badge-success">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</span>')
        else:
            return format_html('<span class="badge badge-warning">–ù–æ–≤–æ–µ</span>')
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    actions = [mark_as_processed, 'mark_as_spam']
    
    def mark_as_spam(self, request, queryset):
        updated = queryset.update(is_spam=True, is_processed=True, processed_at=timezone.now())
        self.message_user(request, f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º: {updated} —Å–æ–æ–±—â–µ–Ω–∏–π.')
    mark_as_spam.short_description = "üö´ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–ø–∞–º"


# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ê–î–ú–ò–ù–ö–ò
# =============================================================================

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "BoltPromo - –ê–¥–º–∏–Ω–∫–∞"
admin.site.site_title = "BoltPromo Admin"


class ShowcaseItemInline(admin.TabularInline):
    """–ò–Ω–ª–∞–π–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –≤–∏—Ç—Ä–∏–Ω–µ"""
    model = ShowcaseItem
    extra = 1
    fields = ('promocode', 'position')
    autocomplete_fields = ['promocode']
    ordering = ('position',)
    verbose_name = '–ü—Ä–æ–º–æ–∫–æ–¥ –≤ –≤–∏—Ç—Ä–∏–Ω–µ'
    verbose_name_plural = '–ü—Ä–æ–º–æ–∫–æ–¥—ã –≤ –≤–∏—Ç—Ä–∏–Ω–µ'


@admin.register(Showcase)
class ShowcaseAdmin(ExportMixin, admin.ModelAdmin):
    list_display = [
        'title', 'slug', 'banner_preview', 'promos_count_display',
        'is_active', 'sort_order', 'created_at'
    ]
    list_filter = ['is_active', 'created_at']
    search_fields = ['title', 'description', 'slug']
    list_editable = ['is_active', 'sort_order']
    prepopulated_fields = {'slug': ('title',)}
    inlines = [ShowcaseItemInline]

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'description')
        }),
        ('–í–∏–∑—É–∞–ª', {
            'fields': ('banner',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_active', 'sort_order')
        }),
    )

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        qs = qs.annotate(promos_count=Count('items'))
        if not request.GET.get('is_active__exact'):
            return qs.filter(is_active=True)
        return qs

    def banner_preview(self, obj):
        if obj.banner:
            return format_html(
                '<img src="{}" width="80" height="45" style="object-fit: cover; border-radius: 4px;" />',
                obj.banner.url
            )
        return '‚Äî'
    banner_preview.short_description = '–ë–∞–Ω–Ω–µ—Ä'

    def promos_count_display(self, obj):
        count = getattr(obj, 'promos_count', 0)
        if count > 0:
            return format_html(
                '<span style="font-weight: bold; color: #417690;">{} –ø—Ä–æ–º–æ</span>',
                count
            )
        return '‚Äî'
    promos_count_display.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'

    actions = [make_active, make_inactive]


@admin.register(SiteSettings)
class SiteSettingsAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞ (singleton)"""

    fieldsets = (
        ('üîß –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç', {
            'fields': (
                'maintenance_enabled', 'maintenance_message',
                'maintenance_expected_end', 'maintenance_telegram_url',
                'maintenance_ip_whitelist'
            )
        }),
        ('üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('canonical_host', 'robots_txt', 'noindex_expired_promos')
        }),
        ('üíæ –ö—ç—à', {
            'fields': ('allow_admin_cache_flush',)
        }),
    )

    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (singleton)"""
        return not SiteSettings.objects.exists()

    def has_delete_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return False

    def changelist_view(self, request, extra_context=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"""
        obj = SiteSettings.objects.first()
        if obj:
            from django.shortcuts import redirect
            return redirect('admin:core_sitesettings_change', obj.pk)
        return super().changelist_view(request, extra_context)

    change_form_template = 'admin/site_settings_change_form.html'


@admin.register(AdminActionLog)
class AdminActionLogAdmin(ExportMixin, admin.ModelAdmin):
    list_display = ['created_at', 'user', 'action', 'details_short']
    list_filter = ['created_at', 'user', 'action']
    search_fields = ['user', 'action', 'details']
    readonly_fields = ['user', 'action', 'details', 'created_at']

    def has_add_permission(self, request):
        return False

    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser

    def details_short(self, obj):
        if len(obj.details) > 50:
            return f"{obj.details[:47]}..."
        return obj.details
    details_short.short_description = '–î–µ—Ç–∞–ª–∏'


@admin.register(Event)
class EventAdmin(ExportMixin, admin.ModelAdmin):
    list_display = ['created_at', 'event_type', 'promo', 'store', 'showcase', 'is_unique', 'session_id_short', 'client_ip']
    list_filter = ['event_type', 'is_unique', 'created_at', 'store', 'showcase']
    search_fields = ['session_id', 'client_ip', 'user_agent', 'utm_source', 'utm_campaign', 'promo__title', 'store__name']
    readonly_fields = [
        'created_at', 'event_type', 'promo', 'store', 'showcase',
        'session_id', 'client_ip', 'user_agent', 'ref',
        'utm_source', 'utm_medium', 'utm_campaign', 'is_unique'
    ]
    date_hierarchy = 'created_at'
    list_per_page = 50
    list_max_show_all = 200
    actions = ['export_csv_events']

    class Media:
        css = {
            'all': ('admin/admin-tweaks.css',)
        }

    def session_id_short(self, obj):
        """–ö–æ—Ä–æ—Ç–∫–∏–π ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return obj.session_id[:8] + "‚Ä¶" if obj.session_id else "‚Äî"
    session_id_short.short_description = 'Session ID'

    def export_csv_events(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ CSV"""
        import csv
        from django.http import HttpResponse
        from datetime import datetime

        response = HttpResponse(content_type='text/csv; charset=utf-8-sig')
        response['Content-Disposition'] = f'attachment; filename="events_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv"'

        writer = csv.writer(response)
        writer.writerow(['–î–∞—Ç–∞', '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', '–ü—Ä–æ–º–æ–∫–æ–¥', '–ú–∞–≥–∞–∑–∏–Ω', '–í–∏—Ç—Ä–∏–Ω–∞', '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ', 'Session ID', 'IP', 'User Agent', 'UTM Source', 'UTM Campaign'])

        for event in queryset:
            writer.writerow([
                event.created_at.strftime('%Y-%m-%d %H:%M:%S') if event.created_at else '',
                event.event_type,
                event.promo.title if event.promo else '',
                event.store.name if event.store else '',
                event.showcase.title if event.showcase else '',
                '–î–∞' if event.is_unique else '–ù–µ—Ç',
                event.session_id or '',
                event.client_ip or '',
                event.user_agent or '',
                event.utm_source or '',
                event.utm_campaign or '',
            ])

        return response
    export_csv_events.short_description = "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ CSV"

    def changelist_view(self, request, extra_context=None):
        from django.contrib import messages
        extra_context = extra_context or {}
        extra_context['title'] = '–°–æ–±—ã—Ç–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
        extra_context['subtitle'] = '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –∫–ª–∏–∫–∏, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏'

        # –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not Event.objects.exists():
            messages.info(request, '–ü–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –°–æ–±—ã—Ç–∏—è –Ω–∞—á–Ω—É—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

        return super().changelist_view(request, extra_context)

    def has_add_permission(self, request):
        return False

    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser


@admin.register(DailyAgg)
class DailyAggAdmin(ExportMixin, admin.ModelAdmin):
    list_display = ['date', 'event_type', 'promo', 'store', 'showcase', 'count', 'unique_count']
    list_filter = ['event_type', 'date']
    search_fields = ['promo__title', 'store__name', 'showcase__title']
    readonly_fields = ['date', 'event_type', 'promo', 'store', 'showcase', 'count', 'unique_count']
    date_hierarchy = 'date'
    list_per_page = 50
    list_max_show_all = 200
    actions = ['export_csv_dailyagg']

    class Media:
        css = {
            'all': ('admin/admin-tweaks.css',)
        }

    def export_csv_dailyagg(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –≤ CSV"""
        import csv
        from django.http import HttpResponse
        from datetime import datetime

        response = HttpResponse(content_type='text/csv; charset=utf-8-sig')
        response['Content-Disposition'] = f'attachment; filename="daily_stats_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv"'

        writer = csv.writer(response)
        writer.writerow(['–î–∞—Ç–∞', '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', '–ü—Ä–æ–º–æ–∫–æ–¥', '–ú–∞–≥–∞–∑–∏–Ω', '–í–∏—Ç—Ä–∏–Ω–∞', '–í—Å–µ–≥–æ', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö'])

        for agg in queryset:
            writer.writerow([
                agg.date.strftime('%Y-%m-%d') if agg.date else '',
                agg.event_type,
                agg.promo.title if agg.promo else '',
                agg.store.name if agg.store else '',
                agg.showcase.title if agg.showcase else '',
                agg.count,
                agg.unique_count,
            ])

        return response
    export_csv_dailyagg.short_description = "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã –≤ CSV"

    def changelist_view(self, request, extra_context=None):
        from django.contrib import messages
        extra_context = extra_context or {}
        extra_context['title'] = '–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        extra_context['subtitle'] = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º, –º–∞–≥–∞–∑–∏–Ω–∞–º –∏ –≤–∏—Ç—Ä–∏–Ω–∞–º —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π'

        # –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not DailyAgg.objects.exists():
            messages.info(request, '–ü–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ê–≥—Ä–µ–≥–∞—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É aggregate_events –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.')

        return super().changelist_view(request, extra_context)

    def has_add_permission(self, request):
        return False


@admin.register(SiteAssets)
class SiteAssetsAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –º–µ–¥–∏–∞-—Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∞–π—Ç–∞ (singleton)"""

    fieldsets = (
        ('üñºÔ∏è Favicon', {
            'fields': ('favicon_src', 'favicon_preview'),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG/ICO –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512√ó512px. –ë—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: favicon.ico, favicon-16.png, favicon-32.png'
        }),
        ('üì± Open Graph –∏ Social Media', {
            'fields': ('og_default', 'og_preview', 'twitter_default'),
            'description': 'OG: 1200√ó630px, Twitter: 1200√ó600px (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        }),
        ('üçé Apple –∏ PWA', {
            'fields': ('apple_touch_icon_src', 'apple_preview', 'pwa_icon_src', 'pwa_preview', 'safari_pinned_svg'),
            'description': 'Apple: 180√ó180px, PWA: 512√ó512px (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã 192, 512, maskable)'
        }),
        ('üé® PWA –¶–≤–µ—Ç–∞', {
            'fields': ('theme_color', 'background_color')
        }),
        ('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', {
            'fields': ('last_generated_at', 'generated_files_info'),
            'classes': ['collapse']
        }),
    )

    readonly_fields = [
        'favicon_preview', 'og_preview', 'apple_preview', 'pwa_preview',
        'last_generated_at', 'generated_files_info'
    ]

    def favicon_preview(self, obj):
        if obj.favicon_src:
            return format_html(
                '<img src="{}" width="64" height="64" style="image-rendering: pixelated; border: 1px solid #3f4451; border-radius: 4px;" /><br><small>–ò—Å—Ö–æ–¥–Ω–∏–∫</small>',
                obj.favicon_src.url
            )
        return '‚Äî'
    favicon_preview.short_description = '–ü—Ä–µ–≤—å—é'

    def og_preview(self, obj):
        if obj.og_default:
            return format_html(
                '<img src="{}" width="300" style="border: 1px solid #3f4451; border-radius: 8px;" /><br><small>1200√ó630px</small>',
                obj.og_default.url
            )
        return '‚Äî'
    og_preview.short_description = '–ü—Ä–µ–≤—å—é OG'

    def apple_preview(self, obj):
        if obj.apple_touch_icon_src:
            return format_html(
                '<img src="{}" width="90" height="90" style="border: 1px solid #3f4451; border-radius: 12px;" /><br><small>Apple Touch Icon</small>',
                obj.apple_touch_icon_src.url
            )
        return '‚Äî'
    apple_preview.short_description = '–ü—Ä–µ–≤—å—é'

    def pwa_preview(self, obj):
        if obj.pwa_icon_src:
            return format_html(
                '<img src="{}" width="128" height="128" style="border: 1px solid #3f4451; border-radius: 4px;" /><br><small>PWA Icon</small>',
                obj.pwa_icon_src.url
            )
        return '‚Äî'
    pwa_preview.short_description = '–ü—Ä–µ–≤—å—é'

    def generated_files_info(self, obj):
        files = []
        if obj.favicon_ico_path:
            files.append(f'‚úì favicon.ico: {obj.favicon_ico_path}')
        if obj.favicon_16_path:
            files.append(f'‚úì favicon-16.png: {obj.favicon_16_path}')
        if obj.favicon_32_path:
            files.append(f'‚úì favicon-32.png: {obj.favicon_32_path}')
        if obj.apple_touch_icon_path:
            files.append(f'‚úì apple-touch-icon.png: {obj.apple_touch_icon_path}')
        if obj.pwa_192_path:
            files.append(f'‚úì icon-192.png: {obj.pwa_192_path}')
        if obj.pwa_512_path:
            files.append(f'‚úì icon-512.png: {obj.pwa_512_path}')
        if obj.pwa_maskable_path:
            files.append(f'‚úì maskable-icon-512.png: {obj.pwa_maskable_path}')

        if files:
            return format_html('<br>'.join(files))
        return '–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.'
    generated_files_info.short_description = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'

    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (singleton)"""
        return not SiteAssets.objects.exists()

    def has_delete_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ"""
        return False

    def changelist_view(self, request, extra_context=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"""
        obj = SiteAssets.objects.first()
        if obj:
            from django.shortcuts import redirect
            return redirect('admin:core_siteassets_change', obj.pk)
        return super().changelist_view(request, extra_context)

    def save_model(self, request, obj, form, change):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        super().save_model(request, obj, form, change)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            from .tasks import generate_site_assets
            task = generate_site_assets.delay(obj.id)
            messages.success(request, f'–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (–∑–∞–¥–∞—á–∞ {task.id})')
        except Exception as e:
            messages.warning(request, f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Celery.')

    change_form_template = 'admin/siteassets_change_form.html'
